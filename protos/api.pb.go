// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: api.proto

package protos

import (
	core "./protos/core"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountType int32

const (
	AccountType_Normal     AccountType = 0
	AccountType_AssetIssue AccountType = 1
	AccountType_Contract   AccountType = 2
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "Normal",
		1: "AssetIssue",
		2: "Contract",
	}
	AccountType_value = map[string]int32{
		"Normal":     0,
		"AssetIssue": 1,
		"Contract":   2,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

type Permission_PermissionType int32

const (
	Permission_Owner   Permission_PermissionType = 0
	Permission_Witness Permission_PermissionType = 1
	Permission_Active  Permission_PermissionType = 2
)

// Enum value maps for Permission_PermissionType.
var (
	Permission_PermissionType_name = map[int32]string{
		0: "Owner",
		1: "Witness",
		2: "Active",
	}
	Permission_PermissionType_value = map[string]int32{
		"Owner":   0,
		"Witness": 1,
		"Active":  2,
	}
)

func (x Permission_PermissionType) Enum() *Permission_PermissionType {
	p := new(Permission_PermissionType)
	*p = x
	return p
}

func (x Permission_PermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Permission_PermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[1].Descriptor()
}

func (Permission_PermissionType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[1]
}

func (x Permission_PermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Permission_PermissionType.Descriptor instead.
func (Permission_PermissionType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3, 0}
}

type Transaction_Contract_ContractType int32

const (
	Transaction_Contract_AccountCreateContract           Transaction_Contract_ContractType = 0
	Transaction_Contract_TransferContract                Transaction_Contract_ContractType = 1
	Transaction_Contract_TransferAssetContract           Transaction_Contract_ContractType = 2
	Transaction_Contract_VoteAssetContract               Transaction_Contract_ContractType = 3
	Transaction_Contract_VoteWitnessContract             Transaction_Contract_ContractType = 4
	Transaction_Contract_WitnessCreateContract           Transaction_Contract_ContractType = 5
	Transaction_Contract_AssetIssueContract              Transaction_Contract_ContractType = 6
	Transaction_Contract_WitnessUpdateContract           Transaction_Contract_ContractType = 8
	Transaction_Contract_ParticipateAssetIssueContract   Transaction_Contract_ContractType = 9
	Transaction_Contract_AccountUpdateContract           Transaction_Contract_ContractType = 10
	Transaction_Contract_FreezeBalanceContract           Transaction_Contract_ContractType = 11
	Transaction_Contract_UnfreezeBalanceContract         Transaction_Contract_ContractType = 12
	Transaction_Contract_WithdrawBalanceContract         Transaction_Contract_ContractType = 13
	Transaction_Contract_UnfreezeAssetContract           Transaction_Contract_ContractType = 14
	Transaction_Contract_UpdateAssetContract             Transaction_Contract_ContractType = 15
	Transaction_Contract_ProposalCreateContract          Transaction_Contract_ContractType = 16
	Transaction_Contract_ProposalApproveContract         Transaction_Contract_ContractType = 17
	Transaction_Contract_ProposalDeleteContract          Transaction_Contract_ContractType = 18
	Transaction_Contract_SetAccountIdContract            Transaction_Contract_ContractType = 19
	Transaction_Contract_CustomContract                  Transaction_Contract_ContractType = 20
	Transaction_Contract_CreateSmartContract             Transaction_Contract_ContractType = 30
	Transaction_Contract_TriggerSmartContract            Transaction_Contract_ContractType = 31
	Transaction_Contract_GetContract                     Transaction_Contract_ContractType = 32
	Transaction_Contract_UpdateSettingContract           Transaction_Contract_ContractType = 33
	Transaction_Contract_ExchangeCreateContract          Transaction_Contract_ContractType = 41
	Transaction_Contract_ExchangeInjectContract          Transaction_Contract_ContractType = 42
	Transaction_Contract_ExchangeWithdrawContract        Transaction_Contract_ContractType = 43
	Transaction_Contract_ExchangeTransactionContract     Transaction_Contract_ContractType = 44
	Transaction_Contract_UpdateEnergyLimitContract       Transaction_Contract_ContractType = 45
	Transaction_Contract_AccountPermissionUpdateContract Transaction_Contract_ContractType = 46
	Transaction_Contract_ClearABIContract                Transaction_Contract_ContractType = 48
	Transaction_Contract_UpdateBrokerageContract         Transaction_Contract_ContractType = 49
	Transaction_Contract_ShieldedTransferContract        Transaction_Contract_ContractType = 51
)

// Enum value maps for Transaction_Contract_ContractType.
var (
	Transaction_Contract_ContractType_name = map[int32]string{
		0:  "AccountCreateContract",
		1:  "TransferContract",
		2:  "TransferAssetContract",
		3:  "VoteAssetContract",
		4:  "VoteWitnessContract",
		5:  "WitnessCreateContract",
		6:  "AssetIssueContract",
		8:  "WitnessUpdateContract",
		9:  "ParticipateAssetIssueContract",
		10: "AccountUpdateContract",
		11: "FreezeBalanceContract",
		12: "UnfreezeBalanceContract",
		13: "WithdrawBalanceContract",
		14: "UnfreezeAssetContract",
		15: "UpdateAssetContract",
		16: "ProposalCreateContract",
		17: "ProposalApproveContract",
		18: "ProposalDeleteContract",
		19: "SetAccountIdContract",
		20: "CustomContract",
		30: "CreateSmartContract",
		31: "TriggerSmartContract",
		32: "GetContract",
		33: "UpdateSettingContract",
		41: "ExchangeCreateContract",
		42: "ExchangeInjectContract",
		43: "ExchangeWithdrawContract",
		44: "ExchangeTransactionContract",
		45: "UpdateEnergyLimitContract",
		46: "AccountPermissionUpdateContract",
		48: "ClearABIContract",
		49: "UpdateBrokerageContract",
		51: "ShieldedTransferContract",
	}
	Transaction_Contract_ContractType_value = map[string]int32{
		"AccountCreateContract":           0,
		"TransferContract":                1,
		"TransferAssetContract":           2,
		"VoteAssetContract":               3,
		"VoteWitnessContract":             4,
		"WitnessCreateContract":           5,
		"AssetIssueContract":              6,
		"WitnessUpdateContract":           8,
		"ParticipateAssetIssueContract":   9,
		"AccountUpdateContract":           10,
		"FreezeBalanceContract":           11,
		"UnfreezeBalanceContract":         12,
		"WithdrawBalanceContract":         13,
		"UnfreezeAssetContract":           14,
		"UpdateAssetContract":             15,
		"ProposalCreateContract":          16,
		"ProposalApproveContract":         17,
		"ProposalDeleteContract":          18,
		"SetAccountIdContract":            19,
		"CustomContract":                  20,
		"CreateSmartContract":             30,
		"TriggerSmartContract":            31,
		"GetContract":                     32,
		"UpdateSettingContract":           33,
		"ExchangeCreateContract":          41,
		"ExchangeInjectContract":          42,
		"ExchangeWithdrawContract":        43,
		"ExchangeTransactionContract":     44,
		"UpdateEnergyLimitContract":       45,
		"AccountPermissionUpdateContract": 46,
		"ClearABIContract":                48,
		"UpdateBrokerageContract":         49,
		"ShieldedTransferContract":        51,
	}
)

func (x Transaction_Contract_ContractType) Enum() *Transaction_Contract_ContractType {
	p := new(Transaction_Contract_ContractType)
	*p = x
	return p
}

func (x Transaction_Contract_ContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_Contract_ContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[2].Descriptor()
}

func (Transaction_Contract_ContractType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[2]
}

func (x Transaction_Contract_ContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_Contract_ContractType.Descriptor instead.
func (Transaction_Contract_ContractType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6, 0, 0}
}

type Transaction_ResultCode int32

const (
	Transaction_Result_SUCESS Transaction_ResultCode = 0
	Transaction_Result_FAILED Transaction_ResultCode = 1
)

// Enum value maps for Transaction_ResultCode.
var (
	Transaction_ResultCode_name = map[int32]string{
		0: "SUCESS",
		1: "FAILED",
	}
	Transaction_ResultCode_value = map[string]int32{
		"SUCESS": 0,
		"FAILED": 1,
	}
)

func (x Transaction_ResultCode) Enum() *Transaction_ResultCode {
	p := new(Transaction_ResultCode)
	*p = x
	return p
}

func (x Transaction_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[3].Descriptor()
}

func (Transaction_ResultCode) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[3]
}

func (x Transaction_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_ResultCode.Descriptor instead.
func (Transaction_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6, 1, 0}
}

type Transaction_ResultContractResult int32

const (
	Transaction_Result_DEFAULT              Transaction_ResultContractResult = 0
	Transaction_Result_SUCCESS              Transaction_ResultContractResult = 1
	Transaction_Result_REVERT               Transaction_ResultContractResult = 2
	Transaction_Result_BAD_JUMP_DESTINATION Transaction_ResultContractResult = 3
	Transaction_Result_OUT_OF_MEMORY        Transaction_ResultContractResult = 4
	Transaction_Result_PRECOMPILED_CONTRACT Transaction_ResultContractResult = 5
	Transaction_Result_STACK_TOO_SMALL      Transaction_ResultContractResult = 6
	Transaction_Result_STACK_TOO_LARGE      Transaction_ResultContractResult = 7
	Transaction_Result_ILLEGAL_OPERATION    Transaction_ResultContractResult = 8
	Transaction_Result_STACK_OVERFLOW       Transaction_ResultContractResult = 9
	Transaction_Result_OUT_OF_ENERGY        Transaction_ResultContractResult = 10
	Transaction_Result_OUT_OF_TIME          Transaction_ResultContractResult = 11
	Transaction_Result_JVM_STACK_OVER_FLOW  Transaction_ResultContractResult = 12
	Transaction_Result_UNKNOWN              Transaction_ResultContractResult = 13
	Transaction_Result_TRANSFER_FAILED      Transaction_ResultContractResult = 14
)

// Enum value maps for Transaction_ResultContractResult.
var (
	Transaction_ResultContractResult_name = map[int32]string{
		0:  "DEFAULT",
		1:  "SUCCESS",
		2:  "REVERT",
		3:  "BAD_JUMP_DESTINATION",
		4:  "OUT_OF_MEMORY",
		5:  "PRECOMPILED_CONTRACT",
		6:  "STACK_TOO_SMALL",
		7:  "STACK_TOO_LARGE",
		8:  "ILLEGAL_OPERATION",
		9:  "STACK_OVERFLOW",
		10: "OUT_OF_ENERGY",
		11: "OUT_OF_TIME",
		12: "JVM_STACK_OVER_FLOW",
		13: "UNKNOWN",
		14: "TRANSFER_FAILED",
	}
	Transaction_ResultContractResult_value = map[string]int32{
		"DEFAULT":              0,
		"SUCCESS":              1,
		"REVERT":               2,
		"BAD_JUMP_DESTINATION": 3,
		"OUT_OF_MEMORY":        4,
		"PRECOMPILED_CONTRACT": 5,
		"STACK_TOO_SMALL":      6,
		"STACK_TOO_LARGE":      7,
		"ILLEGAL_OPERATION":    8,
		"STACK_OVERFLOW":       9,
		"OUT_OF_ENERGY":        10,
		"OUT_OF_TIME":          11,
		"JVM_STACK_OVER_FLOW":  12,
		"UNKNOWN":              13,
		"TRANSFER_FAILED":      14,
	}
)

func (x Transaction_ResultContractResult) Enum() *Transaction_ResultContractResult {
	p := new(Transaction_ResultContractResult)
	*p = x
	return p
}

func (x Transaction_ResultContractResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_ResultContractResult) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[4].Descriptor()
}

func (Transaction_ResultContractResult) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[4]
}

func (x Transaction_ResultContractResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_ResultContractResult.Descriptor instead.
func (Transaction_ResultContractResult) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6, 1, 1}
}

type ReturnResponseCode int32

const (
	Return_SUCCESS                         ReturnResponseCode = 0
	Return_SIGERROR                        ReturnResponseCode = 1 // error in signature
	Return_CONTRACT_VALIDATE_ERROR         ReturnResponseCode = 2
	Return_CONTRACT_EXE_ERROR              ReturnResponseCode = 3
	Return_BANDWITH_ERROR                  ReturnResponseCode = 4
	Return_DUP_TRANSACTION_ERROR           ReturnResponseCode = 5
	Return_TAPOS_ERROR                     ReturnResponseCode = 6
	Return_TOO_BIG_TRANSACTION_ERROR       ReturnResponseCode = 7
	Return_TRANSACTION_EXPIRATION_ERROR    ReturnResponseCode = 8
	Return_SERVER_BUSY                     ReturnResponseCode = 9
	Return_NO_CONNECTION                   ReturnResponseCode = 10
	Return_NOT_ENOUGH_EFFECTIVE_CONNECTION ReturnResponseCode = 11
	Return_OTHER_ERROR                     ReturnResponseCode = 20
)

// Enum value maps for ReturnResponseCode.
var (
	ReturnResponseCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "SIGERROR",
		2:  "CONTRACT_VALIDATE_ERROR",
		3:  "CONTRACT_EXE_ERROR",
		4:  "BANDWITH_ERROR",
		5:  "DUP_TRANSACTION_ERROR",
		6:  "TAPOS_ERROR",
		7:  "TOO_BIG_TRANSACTION_ERROR",
		8:  "TRANSACTION_EXPIRATION_ERROR",
		9:  "SERVER_BUSY",
		10: "NO_CONNECTION",
		11: "NOT_ENOUGH_EFFECTIVE_CONNECTION",
		20: "OTHER_ERROR",
	}
	ReturnResponseCode_value = map[string]int32{
		"SUCCESS":                         0,
		"SIGERROR":                        1,
		"CONTRACT_VALIDATE_ERROR":         2,
		"CONTRACT_EXE_ERROR":              3,
		"BANDWITH_ERROR":                  4,
		"DUP_TRANSACTION_ERROR":           5,
		"TAPOS_ERROR":                     6,
		"TOO_BIG_TRANSACTION_ERROR":       7,
		"TRANSACTION_EXPIRATION_ERROR":    8,
		"SERVER_BUSY":                     9,
		"NO_CONNECTION":                   10,
		"NOT_ENOUGH_EFFECTIVE_CONNECTION": 11,
		"OTHER_ERROR":                     20,
	}
)

func (x ReturnResponseCode) Enum() *ReturnResponseCode {
	p := new(ReturnResponseCode)
	*p = x
	return p
}

func (x ReturnResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[5].Descriptor()
}

func (ReturnResponseCode) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[5]
}

func (x ReturnResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnResponseCode.Descriptor instead.
func (ReturnResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7, 0}
}

type TransactionInfoCode int32

const (
	TransactionInfo_SUCESS TransactionInfoCode = 0
	TransactionInfo_FAILED TransactionInfoCode = 1
)

// Enum value maps for TransactionInfoCode.
var (
	TransactionInfoCode_name = map[int32]string{
		0: "SUCESS",
		1: "FAILED",
	}
	TransactionInfoCode_value = map[string]int32{
		"SUCESS": 0,
		"FAILED": 1,
	}
)

func (x TransactionInfoCode) Enum() *TransactionInfoCode {
	p := new(TransactionInfoCode)
	*p = x
	return p
}

func (x TransactionInfoCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionInfoCode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[6].Descriptor()
}

func (TransactionInfoCode) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[6]
}

func (x TransactionInfoCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionInfoCode.Descriptor instead.
func (TransactionInfoCode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11, 0}
}

// AccountId, (name, address) use name, (null, address) use address, (name, null) use name,
type AccountId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AccountId) Reset() {
	*x = AccountId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountId) ProtoMessage() {}

func (x *AccountId) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountId.ProtoReflect.Descriptor instead.
func (*AccountId) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *AccountId) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccountId) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// vote message
type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the super rep address
	VoteAddress []byte `protobuf:"bytes,1,opt,name=vote_address,json=voteAddress,proto3" json:"vote_address,omitempty"`
	// the vote num to this super rep.
	VoteCount int64 `protobuf:"varint,2,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *Vote) GetVoteAddress() []byte {
	if x != nil {
		return x.VoteAddress
	}
	return nil
}

func (x *Vote) GetVoteCount() int64 {
	if x != nil {
		return x.VoteCount
	}
	return 0
}

// Account
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account nick name
	AccountName []byte      `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Type        AccountType `protobuf:"varint,2,opt,name=type,proto3,enum=protocol.AccountType" json:"type,omitempty"`
	// the create address
	Address []byte `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// the trx balance
	Balance int64 `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`
	// the votes
	Votes []*Vote `protobuf:"bytes,5,rep,name=votes,proto3" json:"votes,omitempty"`
	// the other asset owned by this account
	Asset map[string]int64 `protobuf:"bytes,6,rep,name=asset,proto3" json:"asset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// the other asset owned by this account，key is assetId
	AssetV2 map[string]int64 `protobuf:"bytes,56,rep,name=assetV2,proto3" json:"assetV2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// the frozen balance for bandwidth
	Frozen []*Account_Frozen `protobuf:"bytes,7,rep,name=frozen,proto3" json:"frozen,omitempty"`
	// bandwidth, get from frozen
	NetUsage int64 `protobuf:"varint,8,opt,name=net_usage,json=netUsage,proto3" json:"net_usage,omitempty"`
	//Frozen balance provided by other accounts to this account
	AcquiredDelegatedFrozenBalanceForBandwidth int64 `protobuf:"varint,41,opt,name=acquired_delegated_frozen_balance_for_bandwidth,json=acquiredDelegatedFrozenBalanceForBandwidth,proto3" json:"acquired_delegated_frozen_balance_for_bandwidth,omitempty"`
	//Freeze and provide balances to other accounts
	DelegatedFrozenBalanceForBandwidth int64 `protobuf:"varint,42,opt,name=delegated_frozen_balance_for_bandwidth,json=delegatedFrozenBalanceForBandwidth,proto3" json:"delegated_frozen_balance_for_bandwidth,omitempty"`
	// this account create time
	CreateTime int64 `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// this last operation time, including transfer, voting and so on. //FIXME fix grammar
	LatestOprationTime int64 `protobuf:"varint,10,opt,name=latest_opration_time,json=latestOprationTime,proto3" json:"latest_opration_time,omitempty"`
	// witness block producing allowance
	Allowance int64 `protobuf:"varint,11,opt,name=allowance,proto3" json:"allowance,omitempty"`
	// last withdraw time
	LatestWithdrawTime int64 `protobuf:"varint,12,opt,name=latest_withdraw_time,json=latestWithdrawTime,proto3" json:"latest_withdraw_time,omitempty"`
	// not used so far
	Code        []byte `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	IsWitness   bool   `protobuf:"varint,14,opt,name=is_witness,json=isWitness,proto3" json:"is_witness,omitempty"`
	IsCommittee bool   `protobuf:"varint,15,opt,name=is_committee,json=isCommittee,proto3" json:"is_committee,omitempty"`
	// frozen asset(for asset issuer)
	FrozenSupply []*Account_Frozen `protobuf:"bytes,16,rep,name=frozen_supply,json=frozenSupply,proto3" json:"frozen_supply,omitempty"`
	// asset_issued_name
	AssetIssuedName            []byte           `protobuf:"bytes,17,opt,name=asset_issued_name,json=assetIssuedName,proto3" json:"asset_issued_name,omitempty"`
	AssetIssued_ID             []byte           `protobuf:"bytes,57,opt,name=asset_issued_ID,json=assetIssuedID,proto3" json:"asset_issued_ID,omitempty"`
	LatestAssetOperationTime   map[string]int64 `protobuf:"bytes,18,rep,name=latest_asset_operation_time,json=latestAssetOperationTime,proto3" json:"latest_asset_operation_time,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LatestAssetOperationTimeV2 map[string]int64 `protobuf:"bytes,58,rep,name=latest_asset_operation_timeV2,json=latestAssetOperationTimeV2,proto3" json:"latest_asset_operation_timeV2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FreeNetUsage               int64            `protobuf:"varint,19,opt,name=free_net_usage,json=freeNetUsage,proto3" json:"free_net_usage,omitempty"`
	FreeAssetNetUsage          map[string]int64 `protobuf:"bytes,20,rep,name=free_asset_net_usage,json=freeAssetNetUsage,proto3" json:"free_asset_net_usage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FreeAssetNetUsageV2        map[string]int64 `protobuf:"bytes,59,rep,name=free_asset_net_usageV2,json=freeAssetNetUsageV2,proto3" json:"free_asset_net_usageV2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LatestConsumeTime          int64            `protobuf:"varint,21,opt,name=latest_consume_time,json=latestConsumeTime,proto3" json:"latest_consume_time,omitempty"`
	LatestConsumeFreeTime      int64            `protobuf:"varint,22,opt,name=latest_consume_free_time,json=latestConsumeFreeTime,proto3" json:"latest_consume_free_time,omitempty"`
	// the identity of this account, case insensitive
	AccountId         []byte                   `protobuf:"bytes,23,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountResource   *Account_AccountResource `protobuf:"bytes,26,opt,name=account_resource,json=accountResource,proto3" json:"account_resource,omitempty"`
	CodeHash          []byte                   `protobuf:"bytes,30,opt,name=codeHash,proto3" json:"codeHash,omitempty"`
	OwnerPermission   *Permission              `protobuf:"bytes,31,opt,name=owner_permission,json=ownerPermission,proto3" json:"owner_permission,omitempty"`
	WitnessPermission *Permission              `protobuf:"bytes,32,opt,name=witness_permission,json=witnessPermission,proto3" json:"witness_permission,omitempty"`
	ActivePermission  []*Permission            `protobuf:"bytes,33,rep,name=active_permission,json=activePermission,proto3" json:"active_permission,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *Account) GetAccountName() []byte {
	if x != nil {
		return x.AccountName
	}
	return nil
}

func (x *Account) GetType() AccountType {
	if x != nil {
		return x.Type
	}
	return AccountType_Normal
}

func (x *Account) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Account) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Account) GetVotes() []*Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *Account) GetAsset() map[string]int64 {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *Account) GetAssetV2() map[string]int64 {
	if x != nil {
		return x.AssetV2
	}
	return nil
}

func (x *Account) GetFrozen() []*Account_Frozen {
	if x != nil {
		return x.Frozen
	}
	return nil
}

func (x *Account) GetNetUsage() int64 {
	if x != nil {
		return x.NetUsage
	}
	return 0
}

func (x *Account) GetAcquiredDelegatedFrozenBalanceForBandwidth() int64 {
	if x != nil {
		return x.AcquiredDelegatedFrozenBalanceForBandwidth
	}
	return 0
}

func (x *Account) GetDelegatedFrozenBalanceForBandwidth() int64 {
	if x != nil {
		return x.DelegatedFrozenBalanceForBandwidth
	}
	return 0
}

func (x *Account) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Account) GetLatestOprationTime() int64 {
	if x != nil {
		return x.LatestOprationTime
	}
	return 0
}

func (x *Account) GetAllowance() int64 {
	if x != nil {
		return x.Allowance
	}
	return 0
}

func (x *Account) GetLatestWithdrawTime() int64 {
	if x != nil {
		return x.LatestWithdrawTime
	}
	return 0
}

func (x *Account) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Account) GetIsWitness() bool {
	if x != nil {
		return x.IsWitness
	}
	return false
}

func (x *Account) GetIsCommittee() bool {
	if x != nil {
		return x.IsCommittee
	}
	return false
}

func (x *Account) GetFrozenSupply() []*Account_Frozen {
	if x != nil {
		return x.FrozenSupply
	}
	return nil
}

func (x *Account) GetAssetIssuedName() []byte {
	if x != nil {
		return x.AssetIssuedName
	}
	return nil
}

func (x *Account) GetAssetIssued_ID() []byte {
	if x != nil {
		return x.AssetIssued_ID
	}
	return nil
}

func (x *Account) GetLatestAssetOperationTime() map[string]int64 {
	if x != nil {
		return x.LatestAssetOperationTime
	}
	return nil
}

func (x *Account) GetLatestAssetOperationTimeV2() map[string]int64 {
	if x != nil {
		return x.LatestAssetOperationTimeV2
	}
	return nil
}

func (x *Account) GetFreeNetUsage() int64 {
	if x != nil {
		return x.FreeNetUsage
	}
	return 0
}

func (x *Account) GetFreeAssetNetUsage() map[string]int64 {
	if x != nil {
		return x.FreeAssetNetUsage
	}
	return nil
}

func (x *Account) GetFreeAssetNetUsageV2() map[string]int64 {
	if x != nil {
		return x.FreeAssetNetUsageV2
	}
	return nil
}

func (x *Account) GetLatestConsumeTime() int64 {
	if x != nil {
		return x.LatestConsumeTime
	}
	return 0
}

func (x *Account) GetLatestConsumeFreeTime() int64 {
	if x != nil {
		return x.LatestConsumeFreeTime
	}
	return 0
}

func (x *Account) GetAccountId() []byte {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *Account) GetAccountResource() *Account_AccountResource {
	if x != nil {
		return x.AccountResource
	}
	return nil
}

func (x *Account) GetCodeHash() []byte {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *Account) GetOwnerPermission() *Permission {
	if x != nil {
		return x.OwnerPermission
	}
	return nil
}

func (x *Account) GetWitnessPermission() *Permission {
	if x != nil {
		return x.WitnessPermission
	}
	return nil
}

func (x *Account) GetActivePermission() []*Permission {
	if x != nil {
		return x.ActivePermission
	}
	return nil
}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           Permission_PermissionType `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.Permission_PermissionType" json:"type,omitempty"`
	Id             int32                     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"` //Owner id=0, Witness id=1, Active id start by 2
	PermissionName string                    `protobuf:"bytes,3,opt,name=permission_name,json=permissionName,proto3" json:"permission_name,omitempty"`
	Threshold      int64                     `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	ParentId       int32                     `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Operations     []byte                    `protobuf:"bytes,6,opt,name=operations,proto3" json:"operations,omitempty"` //1 bit 1 contract
	Keys           []*Key                    `protobuf:"bytes,7,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *Permission) GetType() Permission_PermissionType {
	if x != nil {
		return x.Type
	}
	return Permission_Owner
}

func (x *Permission) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Permission) GetPermissionName() string {
	if x != nil {
		return x.PermissionName
	}
	return ""
}

func (x *Permission) GetThreshold() int64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Permission) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Permission) GetOperations() []byte {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *Permission) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Weight  int64  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *Key) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Key) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type TransactionExtention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction    *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Txid           []byte       `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"` //transaction id = sha256(transaction.raw_data)
	ConstantResult [][]byte     `protobuf:"bytes,3,rep,name=constant_result,json=constantResult,proto3" json:"constant_result,omitempty"`
	Result         *Return      `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TransactionExtention) Reset() {
	*x = TransactionExtention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionExtention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionExtention) ProtoMessage() {}

func (x *TransactionExtention) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionExtention.ProtoReflect.Descriptor instead.
func (*TransactionExtention) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionExtention) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionExtention) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *TransactionExtention) GetConstantResult() [][]byte {
	if x != nil {
		return x.ConstantResult
	}
	return nil
}

func (x *TransactionExtention) GetResult() *Return {
	if x != nil {
		return x.Result
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawData *TransactionRaw `protobuf:"bytes,1,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	// only support size = 1, repeated list here for muti-sig extension
	Signature [][]byte              `protobuf:"bytes,2,rep,name=signature,proto3" json:"signature,omitempty"`
	Ret       []*Transaction_Result `protobuf:"bytes,5,rep,name=ret,proto3" json:"ret,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *Transaction) GetRawData() *TransactionRaw {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *Transaction) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction) GetRet() []*Transaction_Result {
	if x != nil {
		return x.Ret
	}
	return nil
}

type Return struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  bool               `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Code    ReturnResponseCode `protobuf:"varint,2,opt,name=code,proto3,enum=protocol.ReturnResponseCode" json:"code,omitempty"`
	Message []byte             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Return) Reset() {
	*x = Return{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Return) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Return) ProtoMessage() {}

func (x *Return) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Return.ProtoReflect.Descriptor instead.
func (*Return) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *Return) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *Return) GetCode() ReturnResponseCode {
	if x != nil {
		return x.Code
	}
	return Return_SUCCESS
}

func (x *Return) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type Authority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account        *AccountId `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	PermissionName []byte     `protobuf:"bytes,2,opt,name=permission_name,json=permissionName,proto3" json:"permission_name,omitempty"`
}

func (x *Authority) Reset() {
	*x = Authority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority) ProtoMessage() {}

func (x *Authority) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority.ProtoReflect.Descriptor instead.
func (*Authority) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *Authority) GetAccount() *AccountId {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Authority) GetPermissionName() []byte {
	if x != nil {
		return x.PermissionName
	}
	return nil
}

type ResourceReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnergyUsage       int64                            `protobuf:"varint,1,opt,name=energy_usage,json=energyUsage,proto3" json:"energy_usage,omitempty"`
	EnergyFee         int64                            `protobuf:"varint,2,opt,name=energy_fee,json=energyFee,proto3" json:"energy_fee,omitempty"`
	OriginEnergyUsage int64                            `protobuf:"varint,3,opt,name=origin_energy_usage,json=originEnergyUsage,proto3" json:"origin_energy_usage,omitempty"`
	EnergyUsageTotal  int64                            `protobuf:"varint,4,opt,name=energy_usage_total,json=energyUsageTotal,proto3" json:"energy_usage_total,omitempty"`
	NetUsage          int64                            `protobuf:"varint,5,opt,name=net_usage,json=netUsage,proto3" json:"net_usage,omitempty"`
	NetFee            int64                            `protobuf:"varint,6,opt,name=net_fee,json=netFee,proto3" json:"net_fee,omitempty"`
	Result            Transaction_ResultContractResult `protobuf:"varint,7,opt,name=result,proto3,enum=protocol.Transaction_ResultContractResult" json:"result,omitempty"`
}

func (x *ResourceReceipt) Reset() {
	*x = ResourceReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceReceipt) ProtoMessage() {}

func (x *ResourceReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceReceipt.ProtoReflect.Descriptor instead.
func (*ResourceReceipt) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *ResourceReceipt) GetEnergyUsage() int64 {
	if x != nil {
		return x.EnergyUsage
	}
	return 0
}

func (x *ResourceReceipt) GetEnergyFee() int64 {
	if x != nil {
		return x.EnergyFee
	}
	return 0
}

func (x *ResourceReceipt) GetOriginEnergyUsage() int64 {
	if x != nil {
		return x.OriginEnergyUsage
	}
	return 0
}

func (x *ResourceReceipt) GetEnergyUsageTotal() int64 {
	if x != nil {
		return x.EnergyUsageTotal
	}
	return 0
}

func (x *ResourceReceipt) GetNetUsage() int64 {
	if x != nil {
		return x.NetUsage
	}
	return 0
}

func (x *ResourceReceipt) GetNetFee() int64 {
	if x != nil {
		return x.NetFee
	}
	return 0
}

func (x *ResourceReceipt) GetResult() Transaction_ResultContractResult {
	if x != nil {
		return x.Result
	}
	return Transaction_Result_DEFAULT
}

type InternalTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internalTransaction identity, the root InternalTransaction hash
	// should equals to root transaction id.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// the one send trx (TBD: or token) via function
	CallerAddress []byte `protobuf:"bytes,2,opt,name=caller_address,json=callerAddress,proto3" json:"caller_address,omitempty"`
	// the one recieve trx (TBD: or token) via function
	TransferToAddress []byte                               `protobuf:"bytes,3,opt,name=transferTo_address,json=transferToAddress,proto3" json:"transferTo_address,omitempty"`
	CallValueInfo     []*InternalTransaction_CallValueInfo `protobuf:"bytes,4,rep,name=callValueInfo,proto3" json:"callValueInfo,omitempty"`
	Note              []byte                               `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	Rejected          bool                                 `protobuf:"varint,6,opt,name=rejected,proto3" json:"rejected,omitempty"`
}

func (x *InternalTransaction) Reset() {
	*x = InternalTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalTransaction) ProtoMessage() {}

func (x *InternalTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalTransaction.ProtoReflect.Descriptor instead.
func (*InternalTransaction) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *InternalTransaction) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *InternalTransaction) GetCallerAddress() []byte {
	if x != nil {
		return x.CallerAddress
	}
	return nil
}

func (x *InternalTransaction) GetTransferToAddress() []byte {
	if x != nil {
		return x.TransferToAddress
	}
	return nil
}

func (x *InternalTransaction) GetCallValueInfo() []*InternalTransaction_CallValueInfo {
	if x != nil {
		return x.CallValueInfo
	}
	return nil
}

func (x *InternalTransaction) GetNote() []byte {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *InternalTransaction) GetRejected() bool {
	if x != nil {
		return x.Rejected
	}
	return false
}

type TransactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fee                           int64                  `protobuf:"varint,2,opt,name=fee,proto3" json:"fee,omitempty"`
	BlockNumber                   int64                  `protobuf:"varint,3,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	BlockTimeStamp                int64                  `protobuf:"varint,4,opt,name=blockTimeStamp,proto3" json:"blockTimeStamp,omitempty"`
	ContractResult                [][]byte               `protobuf:"bytes,5,rep,name=contractResult,proto3" json:"contractResult,omitempty"`
	ContractAddress               []byte                 `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Receipt                       *ResourceReceipt       `protobuf:"bytes,7,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Log                           []*TransactionInfo_Log `protobuf:"bytes,8,rep,name=log,proto3" json:"log,omitempty"`
	Result                        TransactionInfoCode    `protobuf:"varint,9,opt,name=result,proto3,enum=protocol.TransactionInfoCode" json:"result,omitempty"`
	ResMessage                    []byte                 `protobuf:"bytes,10,opt,name=resMessage,proto3" json:"resMessage,omitempty"`
	AssetIssueID                  string                 `protobuf:"bytes,14,opt,name=assetIssueID,proto3" json:"assetIssueID,omitempty"`
	WithdrawAmount                int64                  `protobuf:"varint,15,opt,name=withdraw_amount,json=withdrawAmount,proto3" json:"withdraw_amount,omitempty"`
	UnfreezeAmount                int64                  `protobuf:"varint,16,opt,name=unfreeze_amount,json=unfreezeAmount,proto3" json:"unfreeze_amount,omitempty"`
	InternalTransactions          []*InternalTransaction `protobuf:"bytes,17,rep,name=internal_transactions,json=internalTransactions,proto3" json:"internal_transactions,omitempty"`
	ExchangeReceivedAmount        int64                  `protobuf:"varint,18,opt,name=exchange_received_amount,json=exchangeReceivedAmount,proto3" json:"exchange_received_amount,omitempty"`
	ExchangeInjectAnotherAmount   int64                  `protobuf:"varint,19,opt,name=exchange_inject_another_amount,json=exchangeInjectAnotherAmount,proto3" json:"exchange_inject_another_amount,omitempty"`
	ExchangeWithdrawAnotherAmount int64                  `protobuf:"varint,20,opt,name=exchange_withdraw_another_amount,json=exchangeWithdrawAnotherAmount,proto3" json:"exchange_withdraw_another_amount,omitempty"`
	ExchangeId                    int64                  `protobuf:"varint,21,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`
	ShieldedTransactionFee        int64                  `protobuf:"varint,22,opt,name=shielded_transaction_fee,json=shieldedTransactionFee,proto3" json:"shielded_transaction_fee,omitempty"`
}

func (x *TransactionInfo) Reset() {
	*x = TransactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInfo) ProtoMessage() {}

func (x *TransactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInfo.ProtoReflect.Descriptor instead.
func (*TransactionInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *TransactionInfo) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TransactionInfo) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TransactionInfo) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TransactionInfo) GetBlockTimeStamp() int64 {
	if x != nil {
		return x.BlockTimeStamp
	}
	return 0
}

func (x *TransactionInfo) GetContractResult() [][]byte {
	if x != nil {
		return x.ContractResult
	}
	return nil
}

func (x *TransactionInfo) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *TransactionInfo) GetReceipt() *ResourceReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *TransactionInfo) GetLog() []*TransactionInfo_Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *TransactionInfo) GetResult() TransactionInfoCode {
	if x != nil {
		return x.Result
	}
	return TransactionInfo_SUCESS
}

func (x *TransactionInfo) GetResMessage() []byte {
	if x != nil {
		return x.ResMessage
	}
	return nil
}

func (x *TransactionInfo) GetAssetIssueID() string {
	if x != nil {
		return x.AssetIssueID
	}
	return ""
}

func (x *TransactionInfo) GetWithdrawAmount() int64 {
	if x != nil {
		return x.WithdrawAmount
	}
	return 0
}

func (x *TransactionInfo) GetUnfreezeAmount() int64 {
	if x != nil {
		return x.UnfreezeAmount
	}
	return 0
}

func (x *TransactionInfo) GetInternalTransactions() []*InternalTransaction {
	if x != nil {
		return x.InternalTransactions
	}
	return nil
}

func (x *TransactionInfo) GetExchangeReceivedAmount() int64 {
	if x != nil {
		return x.ExchangeReceivedAmount
	}
	return 0
}

func (x *TransactionInfo) GetExchangeInjectAnotherAmount() int64 {
	if x != nil {
		return x.ExchangeInjectAnotherAmount
	}
	return 0
}

func (x *TransactionInfo) GetExchangeWithdrawAnotherAmount() int64 {
	if x != nil {
		return x.ExchangeWithdrawAnotherAmount
	}
	return 0
}

func (x *TransactionInfo) GetExchangeId() int64 {
	if x != nil {
		return x.ExchangeId
	}
	return 0
}

func (x *TransactionInfo) GetShieldedTransactionFee() int64 {
	if x != nil {
		return x.ShieldedTransactionFee
	}
	return 0
}

// frozen balance
type Account_Frozen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrozenBalance int64 `protobuf:"varint,1,opt,name=frozen_balance,json=frozenBalance,proto3" json:"frozen_balance,omitempty"` // the frozen trx balance
	ExpireTime    int64 `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`          // the expire time
}

func (x *Account_Frozen) Reset() {
	*x = Account_Frozen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account_Frozen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account_Frozen) ProtoMessage() {}

func (x *Account_Frozen) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account_Frozen.ProtoReflect.Descriptor instead.
func (*Account_Frozen) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Account_Frozen) GetFrozenBalance() int64 {
	if x != nil {
		return x.FrozenBalance
	}
	return 0
}

func (x *Account_Frozen) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type Account_AccountResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// energy resource, get from frozen
	EnergyUsage int64 `protobuf:"varint,1,opt,name=energy_usage,json=energyUsage,proto3" json:"energy_usage,omitempty"`
	// the frozen balance for energy
	FrozenBalanceForEnergy     *Account_Frozen `protobuf:"bytes,2,opt,name=frozen_balance_for_energy,json=frozenBalanceForEnergy,proto3" json:"frozen_balance_for_energy,omitempty"`
	LatestConsumeTimeForEnergy int64           `protobuf:"varint,3,opt,name=latest_consume_time_for_energy,json=latestConsumeTimeForEnergy,proto3" json:"latest_consume_time_for_energy,omitempty"`
	//Frozen balance provided by other accounts to this account
	AcquiredDelegatedFrozenBalanceForEnergy int64 `protobuf:"varint,4,opt,name=acquired_delegated_frozen_balance_for_energy,json=acquiredDelegatedFrozenBalanceForEnergy,proto3" json:"acquired_delegated_frozen_balance_for_energy,omitempty"`
	//Frozen balances provided to other accounts
	DelegatedFrozenBalanceForEnergy int64 `protobuf:"varint,5,opt,name=delegated_frozen_balance_for_energy,json=delegatedFrozenBalanceForEnergy,proto3" json:"delegated_frozen_balance_for_energy,omitempty"`
	// storage resource, get from market
	StorageLimit              int64 `protobuf:"varint,6,opt,name=storage_limit,json=storageLimit,proto3" json:"storage_limit,omitempty"`
	StorageUsage              int64 `protobuf:"varint,7,opt,name=storage_usage,json=storageUsage,proto3" json:"storage_usage,omitempty"`
	LatestExchangeStorageTime int64 `protobuf:"varint,8,opt,name=latest_exchange_storage_time,json=latestExchangeStorageTime,proto3" json:"latest_exchange_storage_time,omitempty"`
}

func (x *Account_AccountResource) Reset() {
	*x = Account_AccountResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account_AccountResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account_AccountResource) ProtoMessage() {}

func (x *Account_AccountResource) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account_AccountResource.ProtoReflect.Descriptor instead.
func (*Account_AccountResource) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2, 7}
}

func (x *Account_AccountResource) GetEnergyUsage() int64 {
	if x != nil {
		return x.EnergyUsage
	}
	return 0
}

func (x *Account_AccountResource) GetFrozenBalanceForEnergy() *Account_Frozen {
	if x != nil {
		return x.FrozenBalanceForEnergy
	}
	return nil
}

func (x *Account_AccountResource) GetLatestConsumeTimeForEnergy() int64 {
	if x != nil {
		return x.LatestConsumeTimeForEnergy
	}
	return 0
}

func (x *Account_AccountResource) GetAcquiredDelegatedFrozenBalanceForEnergy() int64 {
	if x != nil {
		return x.AcquiredDelegatedFrozenBalanceForEnergy
	}
	return 0
}

func (x *Account_AccountResource) GetDelegatedFrozenBalanceForEnergy() int64 {
	if x != nil {
		return x.DelegatedFrozenBalanceForEnergy
	}
	return 0
}

func (x *Account_AccountResource) GetStorageLimit() int64 {
	if x != nil {
		return x.StorageLimit
	}
	return 0
}

func (x *Account_AccountResource) GetStorageUsage() int64 {
	if x != nil {
		return x.StorageUsage
	}
	return 0
}

func (x *Account_AccountResource) GetLatestExchangeStorageTime() int64 {
	if x != nil {
		return x.LatestExchangeStorageTime
	}
	return 0
}

type Transaction_Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Transaction_Contract_ContractType `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.Transaction_Contract_ContractType" json:"type,omitempty"`
	Parameter    *anypb.Any                        `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Provider     []byte                            `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	ContractName []byte                            `protobuf:"bytes,4,opt,name=ContractName,json=contractName,proto3" json:"ContractName,omitempty"`
	PermissionId int32                             `protobuf:"varint,5,opt,name=Permission_id,json=permissionId,proto3" json:"Permission_id,omitempty"`
}

func (x *Transaction_Contract) Reset() {
	*x = Transaction_Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Contract) ProtoMessage() {}

func (x *Transaction_Contract) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Contract.ProtoReflect.Descriptor instead.
func (*Transaction_Contract) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Transaction_Contract) GetType() Transaction_Contract_ContractType {
	if x != nil {
		return x.Type
	}
	return Transaction_Contract_AccountCreateContract
}

func (x *Transaction_Contract) GetParameter() *anypb.Any {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *Transaction_Contract) GetProvider() []byte {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Transaction_Contract) GetContractName() []byte {
	if x != nil {
		return x.ContractName
	}
	return nil
}

func (x *Transaction_Contract) GetPermissionId() int32 {
	if x != nil {
		return x.PermissionId
	}
	return 0
}

type Transaction_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee                           int64                            `protobuf:"varint,1,opt,name=fee,proto3" json:"fee,omitempty"`
	Ret                           Transaction_ResultCode           `protobuf:"varint,2,opt,name=ret,proto3,enum=protocol.Transaction_ResultCode" json:"ret,omitempty"`
	ContractRet                   Transaction_ResultContractResult `protobuf:"varint,3,opt,name=contractRet,proto3,enum=protocol.Transaction_ResultContractResult" json:"contractRet,omitempty"`
	AssetIssueID                  string                           `protobuf:"bytes,14,opt,name=assetIssueID,proto3" json:"assetIssueID,omitempty"`
	WithdrawAmount                int64                            `protobuf:"varint,15,opt,name=withdraw_amount,json=withdrawAmount,proto3" json:"withdraw_amount,omitempty"`
	UnfreezeAmount                int64                            `protobuf:"varint,16,opt,name=unfreeze_amount,json=unfreezeAmount,proto3" json:"unfreeze_amount,omitempty"`
	ExchangeReceivedAmount        int64                            `protobuf:"varint,18,opt,name=exchange_received_amount,json=exchangeReceivedAmount,proto3" json:"exchange_received_amount,omitempty"`
	ExchangeInjectAnotherAmount   int64                            `protobuf:"varint,19,opt,name=exchange_inject_another_amount,json=exchangeInjectAnotherAmount,proto3" json:"exchange_inject_another_amount,omitempty"`
	ExchangeWithdrawAnotherAmount int64                            `protobuf:"varint,20,opt,name=exchange_withdraw_another_amount,json=exchangeWithdrawAnotherAmount,proto3" json:"exchange_withdraw_another_amount,omitempty"`
	ExchangeId                    int64                            `protobuf:"varint,21,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`
	ShieldedTransactionFee        int64                            `protobuf:"varint,22,opt,name=shielded_transaction_fee,json=shieldedTransactionFee,proto3" json:"shielded_transaction_fee,omitempty"`
}

func (x *Transaction_Result) Reset() {
	*x = Transaction_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Result) ProtoMessage() {}

func (x *Transaction_Result) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Result.ProtoReflect.Descriptor instead.
func (*Transaction_Result) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Transaction_Result) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Transaction_Result) GetRet() Transaction_ResultCode {
	if x != nil {
		return x.Ret
	}
	return Transaction_Result_SUCESS
}

func (x *Transaction_Result) GetContractRet() Transaction_ResultContractResult {
	if x != nil {
		return x.ContractRet
	}
	return Transaction_Result_DEFAULT
}

func (x *Transaction_Result) GetAssetIssueID() string {
	if x != nil {
		return x.AssetIssueID
	}
	return ""
}

func (x *Transaction_Result) GetWithdrawAmount() int64 {
	if x != nil {
		return x.WithdrawAmount
	}
	return 0
}

func (x *Transaction_Result) GetUnfreezeAmount() int64 {
	if x != nil {
		return x.UnfreezeAmount
	}
	return 0
}

func (x *Transaction_Result) GetExchangeReceivedAmount() int64 {
	if x != nil {
		return x.ExchangeReceivedAmount
	}
	return 0
}

func (x *Transaction_Result) GetExchangeInjectAnotherAmount() int64 {
	if x != nil {
		return x.ExchangeInjectAnotherAmount
	}
	return 0
}

func (x *Transaction_Result) GetExchangeWithdrawAnotherAmount() int64 {
	if x != nil {
		return x.ExchangeWithdrawAnotherAmount
	}
	return 0
}

func (x *Transaction_Result) GetExchangeId() int64 {
	if x != nil {
		return x.ExchangeId
	}
	return 0
}

func (x *Transaction_Result) GetShieldedTransactionFee() int64 {
	if x != nil {
		return x.ShieldedTransactionFee
	}
	return 0
}

type TransactionRaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefBlockBytes []byte       `protobuf:"bytes,1,opt,name=ref_block_bytes,json=refBlockBytes,proto3" json:"ref_block_bytes,omitempty"`
	RefBlockNum   int64        `protobuf:"varint,3,opt,name=ref_block_num,json=refBlockNum,proto3" json:"ref_block_num,omitempty"`
	RefBlockHash  []byte       `protobuf:"bytes,4,opt,name=ref_block_hash,json=refBlockHash,proto3" json:"ref_block_hash,omitempty"`
	Expiration    int64        `protobuf:"varint,8,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Auths         []*Authority `protobuf:"bytes,9,rep,name=auths,proto3" json:"auths,omitempty"`
	// transaction note
	Data []byte `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	//only support size = 1, repeated list here for extension
	Contract []*Transaction_Contract `protobuf:"bytes,11,rep,name=contract,proto3" json:"contract,omitempty"`
	// scripts not used
	Scripts   []byte `protobuf:"bytes,12,opt,name=scripts,proto3" json:"scripts,omitempty"`
	Timestamp int64  `protobuf:"varint,14,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FeeLimit  int64  `protobuf:"varint,18,opt,name=fee_limit,json=feeLimit,proto3" json:"fee_limit,omitempty"`
}

func (x *TransactionRaw) Reset() {
	*x = TransactionRaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRaw) ProtoMessage() {}

func (x *TransactionRaw) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRaw.ProtoReflect.Descriptor instead.
func (*TransactionRaw) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6, 2}
}

func (x *TransactionRaw) GetRefBlockBytes() []byte {
	if x != nil {
		return x.RefBlockBytes
	}
	return nil
}

func (x *TransactionRaw) GetRefBlockNum() int64 {
	if x != nil {
		return x.RefBlockNum
	}
	return 0
}

func (x *TransactionRaw) GetRefBlockHash() []byte {
	if x != nil {
		return x.RefBlockHash
	}
	return nil
}

func (x *TransactionRaw) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *TransactionRaw) GetAuths() []*Authority {
	if x != nil {
		return x.Auths
	}
	return nil
}

func (x *TransactionRaw) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransactionRaw) GetContract() []*Transaction_Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *TransactionRaw) GetScripts() []byte {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *TransactionRaw) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TransactionRaw) GetFeeLimit() int64 {
	if x != nil {
		return x.FeeLimit
	}
	return 0
}

type InternalTransaction_CallValueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trx (TBD: or token) value
	CallValue int64 `protobuf:"varint,1,opt,name=callValue,proto3" json:"callValue,omitempty"`
	// TBD: tokenName, trx should be empty
	TokenId string `protobuf:"bytes,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (x *InternalTransaction_CallValueInfo) Reset() {
	*x = InternalTransaction_CallValueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalTransaction_CallValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalTransaction_CallValueInfo) ProtoMessage() {}

func (x *InternalTransaction_CallValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalTransaction_CallValueInfo.ProtoReflect.Descriptor instead.
func (*InternalTransaction_CallValueInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10, 0}
}

func (x *InternalTransaction_CallValueInfo) GetCallValue() int64 {
	if x != nil {
		return x.CallValue
	}
	return 0
}

func (x *InternalTransaction_CallValueInfo) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type TransactionInfo_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Topics  [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Data    []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TransactionInfo_Log) Reset() {
	*x = TransactionInfo_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInfo_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInfo_Log) ProtoMessage() {}

func (x *TransactionInfo_Log) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInfo_Log.ProtoReflect.Descriptor instead.
func (*TransactionInfo_Log) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11, 0}
}

func (x *TransactionInfo_Log) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TransactionInfo_Log) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *TransactionInfo_Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x27, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x39, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x48, 0x0a, 0x04,
	0x56, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0, 0x16, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x38,
	0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x56, 0x32, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x56, 0x32, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x2f, 0x61, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x2a, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x6f, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x52, 0x0a, 0x26,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x5f, 0x49, 0x44, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x49, 0x44, 0x12, 0x6e, 0x0a, 0x1b,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x1d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x18, 0x3a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x56,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x56, 0x32, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65,
	0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x66, 0x72, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x18, 0x3b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x66, 0x72, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x56, 0x32, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x10,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x11,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x50, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x56, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x1f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x56, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x46, 0x72, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x46, 0x72, 0x65,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x85, 0x04, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x19, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52, 0x16, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x42, 0x0a,
	0x1e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x5d, 0x0a, 0x2c, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x27, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x12, 0x4c, 0x0a, 0x23, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x0a, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b,
	0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x34, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x22, 0x37,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x80, 0x14, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x61, 0x77, 0x52, 0x07, 0x72,
	0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x1a, 0xf4, 0x08, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8d, 0x07, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x0b, 0x12,
	0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x0f, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x14,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x10, 0x20, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x21, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x2a, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x10, 0x2b, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x10, 0x2c, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x10, 0x2d, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x2e, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x41, 0x42, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x30,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x31, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x33, 0x1a, 0x8b, 0x07, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44,
	0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x20, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6e, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x55, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0xb1, 0x02, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x41, 0x44, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x07, 0x12,
	0x15, 0x0a, 0x11, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x55,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x0a, 0x12, 0x0f, 0x0a,
	0x0b, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0b, 0x12, 0x17,
	0x0a, 0x13, 0x4a, 0x56, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0e, 0x1a, 0xe7, 0x02, 0x0a, 0x03, 0x72, 0x61,
	0x77, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x65, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x05, 0x61, 0x75, 0x74, 0x68, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x65, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xab, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x47, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x55,
	0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x50, 0x4f, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49,
	0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x14, 0x22, 0x63, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x46, 0x65, 0x65,
	0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcb, 0x02, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x61, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0x47, 0x0a, 0x0d, 0x43, 0x61,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x22, 0xe8, 0x07, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x6c,
	0x6f, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x36, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x15, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38,
	0x0a, 0x18, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a,
	0x20, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x1a, 0x4b, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x37,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x02, 0x32, 0xc4, 0x01, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x12, 0x66, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x12,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x13, 0x12, 0x11, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x0a,
	0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_api_proto_goTypes = []interface{}{
	(AccountType)(0),                       // 0: protocol.AccountType
	(Permission_PermissionType)(0),         // 1: protocol.Permission.PermissionType
	(Transaction_Contract_ContractType)(0), // 2: protocol.Transaction.Contract.ContractType
	(Transaction_ResultCode)(0),            // 3: protocol.Transaction.Result.code
	(Transaction_ResultContractResult)(0),  // 4: protocol.Transaction.Result.contractResult
	(ReturnResponseCode)(0),                // 5: protocol.Return.response_code
	(TransactionInfoCode)(0),               // 6: protocol.TransactionInfo.code
	(*AccountId)(nil),                      // 7: protocol.AccountId
	(*Vote)(nil),                           // 8: protocol.Vote
	(*Account)(nil),                        // 9: protocol.Account
	(*Permission)(nil),                     // 10: protocol.Permission
	(*Key)(nil),                            // 11: protocol.Key
	(*TransactionExtention)(nil),           // 12: protocol.TransactionExtention
	(*Transaction)(nil),                    // 13: protocol.Transaction
	(*Return)(nil),                         // 14: protocol.Return
	(*Authority)(nil),                      // 15: protocol.authority
	(*ResourceReceipt)(nil),                // 16: protocol.ResourceReceipt
	(*InternalTransaction)(nil),            // 17: protocol.InternalTransaction
	(*TransactionInfo)(nil),                // 18: protocol.TransactionInfo
	(*Account_Frozen)(nil),                 // 19: protocol.Account.Frozen
	nil,                                    // 20: protocol.Account.AssetEntry
	nil,                                    // 21: protocol.Account.AssetV2Entry
	nil,                                    // 22: protocol.Account.LatestAssetOperationTimeEntry
	nil,                                    // 23: protocol.Account.LatestAssetOperationTimeV2Entry
	nil,                                    // 24: protocol.Account.FreeAssetNetUsageEntry
	nil,                                    // 25: protocol.Account.FreeAssetNetUsageV2Entry
	(*Account_AccountResource)(nil),        // 26: protocol.Account.AccountResource
	(*Transaction_Contract)(nil),           // 27: protocol.Transaction.Contract
	(*Transaction_Result)(nil),             // 28: protocol.Transaction.Result
	(*TransactionRaw)(nil),                 // 29: protocol.Transaction.raw
	(*InternalTransaction_CallValueInfo)(nil), // 30: protocol.InternalTransaction.CallValueInfo
	(*TransactionInfo_Log)(nil),               // 31: protocol.TransactionInfo.Log
	(*anypb.Any)(nil),                         // 32: google.protobuf.Any
	(*core.TransferContract)(nil),             // 33: protocol.TransferContract
}
var file_api_proto_depIdxs = []int32{
	0,  // 0: protocol.Account.type:type_name -> protocol.AccountType
	8,  // 1: protocol.Account.votes:type_name -> protocol.Vote
	20, // 2: protocol.Account.asset:type_name -> protocol.Account.AssetEntry
	21, // 3: protocol.Account.assetV2:type_name -> protocol.Account.AssetV2Entry
	19, // 4: protocol.Account.frozen:type_name -> protocol.Account.Frozen
	19, // 5: protocol.Account.frozen_supply:type_name -> protocol.Account.Frozen
	22, // 6: protocol.Account.latest_asset_operation_time:type_name -> protocol.Account.LatestAssetOperationTimeEntry
	23, // 7: protocol.Account.latest_asset_operation_timeV2:type_name -> protocol.Account.LatestAssetOperationTimeV2Entry
	24, // 8: protocol.Account.free_asset_net_usage:type_name -> protocol.Account.FreeAssetNetUsageEntry
	25, // 9: protocol.Account.free_asset_net_usageV2:type_name -> protocol.Account.FreeAssetNetUsageV2Entry
	26, // 10: protocol.Account.account_resource:type_name -> protocol.Account.AccountResource
	10, // 11: protocol.Account.owner_permission:type_name -> protocol.Permission
	10, // 12: protocol.Account.witness_permission:type_name -> protocol.Permission
	10, // 13: protocol.Account.active_permission:type_name -> protocol.Permission
	1,  // 14: protocol.Permission.type:type_name -> protocol.Permission.PermissionType
	11, // 15: protocol.Permission.keys:type_name -> protocol.Key
	13, // 16: protocol.TransactionExtention.transaction:type_name -> protocol.Transaction
	14, // 17: protocol.TransactionExtention.result:type_name -> protocol.Return
	29, // 18: protocol.Transaction.raw_data:type_name -> protocol.Transaction.raw
	28, // 19: protocol.Transaction.ret:type_name -> protocol.Transaction.Result
	5,  // 20: protocol.Return.code:type_name -> protocol.Return.response_code
	7,  // 21: protocol.authority.account:type_name -> protocol.AccountId
	4,  // 22: protocol.ResourceReceipt.result:type_name -> protocol.Transaction.Result.contractResult
	30, // 23: protocol.InternalTransaction.callValueInfo:type_name -> protocol.InternalTransaction.CallValueInfo
	16, // 24: protocol.TransactionInfo.receipt:type_name -> protocol.ResourceReceipt
	31, // 25: protocol.TransactionInfo.log:type_name -> protocol.TransactionInfo.Log
	6,  // 26: protocol.TransactionInfo.result:type_name -> protocol.TransactionInfo.code
	17, // 27: protocol.TransactionInfo.internal_transactions:type_name -> protocol.InternalTransaction
	19, // 28: protocol.Account.AccountResource.frozen_balance_for_energy:type_name -> protocol.Account.Frozen
	2,  // 29: protocol.Transaction.Contract.type:type_name -> protocol.Transaction.Contract.ContractType
	32, // 30: protocol.Transaction.Contract.parameter:type_name -> google.protobuf.Any
	3,  // 31: protocol.Transaction.Result.ret:type_name -> protocol.Transaction.Result.code
	4,  // 32: protocol.Transaction.Result.contractRet:type_name -> protocol.Transaction.Result.contractResult
	15, // 33: protocol.Transaction.raw.auths:type_name -> protocol.authority
	27, // 34: protocol.Transaction.raw.contract:type_name -> protocol.Transaction.Contract
	9,  // 35: protocol.Wallet.GetAccount:input_type -> protocol.Account
	33, // 36: protocol.Wallet.CreateTransaction2:input_type -> protocol.TransferContract
	9,  // 37: protocol.Wallet.GetAccount:output_type -> protocol.Account
	12, // 38: protocol.Wallet.CreateTransaction2:output_type -> protocol.TransactionExtention
	37, // [37:39] is the sub-list for method output_type
	35, // [35:37] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionExtention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Return); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account_Frozen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account_AccountResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalTransaction_CallValueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInfo_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
